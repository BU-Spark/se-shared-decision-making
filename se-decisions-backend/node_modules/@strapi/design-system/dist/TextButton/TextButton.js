import { jsxs as c, jsx as t } from "react/jsx-runtime";
import * as u from "react";
import { Loader as h } from "@strapi/icons";
import d, { keyframes as g } from "styled-components";
import { Box as p } from "../Box/Box.js";
import { Flex as x } from "../Flex/Flex.js";
import { buttonFocusStyle as y } from "../themes/utils.js";
import { Typography as b } from "../Typography/Typography.js";
const v = g`
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(359deg);
  }
`, $ = d.div`
  animation: ${v} 2s infinite linear;
  will-change: transform;
`, B = d(x)`
  background: transparent;
  border: none;

  &[aria-disabled='true'] {
    pointer-events: none;
    svg path {
      fill: ${({
  theme: r
}) => r.colors.neutral600};
    }
  }

  svg {
    display: flex;
    font-size: ${10 / 16}rem;
  }

  svg path {
    fill: ${({
  theme: r
}) => r.colors.primary600};
  }

  ${y}
`, T = u.forwardRef(({
  children: r,
  startIcon: o,
  endIcon: a,
  onClick: n,
  disabled: i = !1,
  loading: e = !1,
  ...l
}, m) => {
  const f = n && !i ? n : void 0, s = i || e;
  return c(B, {
    ref: m,
    "aria-disabled": s,
    onClick: f,
    as: "button",
    type: "button",
    ...l,
    children: [(o || e) && t(p, {
      as: "span",
      paddingRight: 2,
      "aria-hidden": !0,
      children: e ? t($, {
        children: t(h, {})
      }) : o
    }), t(b, {
      variant: "pi",
      textColor: s ? "neutral600" : "primary600",
      children: r
    }), a && t(p, {
      as: "span",
      paddingLeft: 2,
      "aria-hidden": !0,
      children: a
    })]
  });
});
T.displayName = "TextButton";
export {
  T as TextButton
};
