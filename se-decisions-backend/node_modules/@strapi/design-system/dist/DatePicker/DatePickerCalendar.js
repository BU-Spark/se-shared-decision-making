import e, { useState as L, useEffect as W } from "react";
import a from "prop-types";
import { DatePickerPopover as _ } from "./components.js";
import { DatePickerTd as H } from "./DatePickerTd.js";
import { DatePickerTh as r } from "./DatePickerTh.js";
import { getDayOfWeek as I } from "./utils/getDayOfWeek.js";
import { getMonths as V } from "./utils/getMonths.js";
import { generateWeeks as j } from "./utils/generateWeeks.js";
import { getYears as z } from "./utils/getYears.js";
import { formatDate as A } from "./utils/formatDate.js";
import { Box as p } from "../Box/Box.js";
import { Flex as G } from "../Flex/Flex.js";
import { FocusTrap as J } from "../FocusTrap/FocusTrap.js";
import { RawTable as K } from "../RawTable/RawTable.js";
import "react/jsx-runtime";
import "../RawTable/RawTableContext.js";
import { RawThead as N } from "../RawTable/RawThead.js";
import { RawTbody as Q } from "../RawTable/RawTbody.js";
import { RawTr as s } from "../RawTable/RawTr.js";
import { SimpleMenu as f, MenuItem as d } from "../SimpleMenu/SimpleMenu.js";
import { VisuallyHidden as U } from "../VisuallyHidden/VisuallyHidden.js";
const E = ({
  selectedDate: i,
  initialDate: g,
  popoverSource: D,
  onChange: h,
  label: k,
  minDate: w,
  maxDate: R,
  onEscape: y
}) => {
  const [l, m] = L(g), [u, C, T] = j(l, i), { sun: v, mon: x, tue: M, wed: O, thu: P, fri: b, sat: q } = I(), c = V(), F = z(w, R);
  W(() => {
    i && m(i);
  }, [i]);
  const Y = (t) => {
    const n = new Date(l);
    n.setMonth(c.indexOf(t)), m(n);
  }, S = (t) => {
    const n = new Date(l);
    n.setFullYear(t), m(n);
  };
  return /* @__PURE__ */ e.createElement(_, { source: D, role: "dialog", "aria-modal": "true", "aria-label": k, spacing: 4 }, /* @__PURE__ */ e.createElement(J, { onEscape: y }, /* @__PURE__ */ e.createElement(p, { padding: 4 }, /* @__PURE__ */ e.createElement(p, { paddingBottom: 4, paddingLeft: 2, paddingRight: 2 }, /* @__PURE__ */ e.createElement(G, null, /* @__PURE__ */ e.createElement(f, { label: c[l.getMonth()] }, c.map((t) => /* @__PURE__ */ e.createElement(d, { key: t, onClick: () => Y(t) }, t))), /* @__PURE__ */ e.createElement(p, { paddingLeft: 2 }, /* @__PURE__ */ e.createElement(f, { label: l.getFullYear() }, F.map((t) => /* @__PURE__ */ e.createElement(d, { key: t, onClick: () => S(t) }, t)))))), /* @__PURE__ */ e.createElement(K, { colCount: 7, rowCount: u.length + 1, initialCol: T, initialRow: C, role: "grid" }, /* @__PURE__ */ e.createElement(N, null, /* @__PURE__ */ e.createElement(s, { "aria-rowindex": 1 }, /* @__PURE__ */ e.createElement(r, null, v), /* @__PURE__ */ e.createElement(r, null, x), /* @__PURE__ */ e.createElement(r, null, M), /* @__PURE__ */ e.createElement(r, null, O), /* @__PURE__ */ e.createElement(r, null, P), /* @__PURE__ */ e.createElement(r, null, b), /* @__PURE__ */ e.createElement(r, null, q))), /* @__PURE__ */ e.createElement(Q, null, u.map((t, n) => /* @__PURE__ */ e.createElement(s, { key: n }, t.map(({ date: o, outsideMonth: $, isSelected: B }) => /* @__PURE__ */ e.createElement(
    H,
    {
      key: `${o.getFullYear()}-${o.getMonth() + 1}-${o.getDate()}`,
      outsideMonth: $,
      onSelectDay: () => h(o),
      isSelected: B
    },
    /* @__PURE__ */ e.createElement("span", { "aria-hidden": !0 }, o.getDate()),
    /* @__PURE__ */ e.createElement(U, null, /* @__PURE__ */ e.createElement("span", null, A(o)))
  )))))))));
};
E.defaultProps = {
  selectedDate: void 0,
  initialDate: new Date(),
  minDate: void 0,
  maxDate: void 0
};
E.propTypes = {
  initialDate: a.instanceOf(Date),
  label: a.string.isRequired,
  maxDate: a.instanceOf(Date),
  minDate: a.instanceOf(Date),
  onChange: a.func.isRequired,
  onEscape: a.func.isRequired,
  popoverSource: a.shape({
    current: (typeof Element > "u" ? a.any : a.instanceOf(Element)).isRequired
  }).isRequired,
  selectedDate: a.instanceOf(Date)
};
export {
  E as DatePickerCalendar
};
