import l from "react";
import o from "prop-types";
import c from "styled-components";
import "react/jsx-runtime";
import "../RawTable/RawTableContext.js";
import { RawTd as m } from "../RawTable/RawCell.js";
import "../Box/Box.js";
import { Typography as n } from "../Typography/Typography.js";
const s = c.button`
  border: none;
  background: ${({ theme: e, isSelected: r }) => r ? e.colors.primary100 : e.colors.neutral0};
  height: ${32 / 16}rem;
  text-align: center;
  width: ${32 / 16}rem;
  border-radius: ${({ theme: e }) => e.borderRadius};

  // Trick to prevent the outline from overflowing because of the general outline-offset
  outline-offset: -2px;

  &:hover {
    background: ${({ theme: e }) => e.colors.primary100};
  }

  &:hover > ${n} {
    color: ${({ theme: e }) => e.colors.primary600};
  }
`, a = ({ children: e, outsideMonth: r, onSelectDay: p, isSelected: t, ...u }) => {
  let i = "neutral900";
  return t ? i = "primary600" : r && (i = "neutral600"), /* @__PURE__ */ l.createElement(m, { ...u }, /* @__PURE__ */ l.createElement(s, { tabIndex: -1, onClick: p, isSelected: t, type: "button" }, /* @__PURE__ */ l.createElement(n, { variant: "pi", textColor: i, fontWeight: t ? "bold" : null }, e)));
};
a.defaultProps = {
  isSelected: !1,
  outsideMonth: !1
};
a.propTypes = {
  children: o.node.isRequired,
  isSelected: o.bool,
  onSelectDay: o.func.isRequired,
  outsideMonth: o.bool
};
export {
  a as DatePickerTd
};
