import t, { useState as B, useRef as D } from "react";
import { Calendar as T, Cross as W } from "@strapi/icons";
import e from "prop-types";
import { DatePickerWrapper as q, DatePickerButton as A, IconBox as I } from "./components.js";
import { DatePickerCalendar as S } from "./DatePickerCalendar.js";
import { formatDate as b } from "./utils/formatDate.js";
import { getDefaultLocale as V } from "../helpers/getDefaultLocale.js";
import { TextInput as _ } from "../TextInput/TextInput.js";
import { sizes as j } from "../themes/sizes.js";
const v = ({
  ariaLabel: o,
  initialDate: g,
  selectedDate: a,
  onChange: C,
  label: i,
  locale: h,
  selectedDateLabel: k,
  onClear: s,
  clearLabel: E,
  disabled: r,
  id: R,
  minDate: P,
  maxDate: O,
  ...x
}) => {
  const [f, l] = B(!1), n = D(null), p = D(null), u = h || V(), m = a ? b(a, u) : "", d = () => {
    r || l((c) => !c);
  }, y = () => {
    r || (s(), p.current.focus());
  }, L = (c) => {
    C(c), l(!1);
  }, z = () => {
    l(!1);
  };
  return /* @__PURE__ */ t.createElement(q, { bold: f }, /* @__PURE__ */ t.createElement(
    _,
    {
      ref: n,
      onClick: d,
      onChange: () => {
      },
      value: m,
      startAction: /* @__PURE__ */ t.createElement(
        A,
        {
          ref: p,
          onClick: d,
          "aria-label": a ? k(b(a, u)) : i || o,
          type: "button",
          "aria-disabled": r
        },
        /* @__PURE__ */ t.createElement(T, { "aria-hidden": !0 })
      ),
      endAction: s && m ? /* @__PURE__ */ t.createElement(I, { as: "button", onClick: y, "aria-label": E, "aria-disabled": r }, /* @__PURE__ */ t.createElement(W, null)) : void 0,
      "aria-autocomplete": "none",
      label: i,
      "aria-label": o,
      disabled: r,
      id: R,
      ...x
    }
  ), n.current && n.current.inputWrapperRef && f && /* @__PURE__ */ t.createElement(
    S,
    {
      selectedDate: a,
      initialDate: g,
      onChange: L,
      onEscape: z,
      popoverSource: n.current.inputWrapperRef,
      label: i || o,
      minDate: P,
      maxDate: O
    }
  ));
};
v.defaultProps = {
  ariaLabel: void 0,
  clearLabel: void 0,
  disabled: !1,
  id: void 0,
  label: void 0,
  locale: void 0,
  initialDate: new Date(),
  minDate: void 0,
  maxDate: void 0,
  onClear: void 0,
  placeholder: void 0,
  selectedDate: void 0,
  size: "M"
};
v.propTypes = {
  ariaLabel: e.string,
  clearLabel: e.string,
  disabled: e.bool,
  id: e.string,
  initialDate: e.instanceOf(Date),
  label: e.string,
  locale: e.string,
  maxDate: e.instanceOf(Date),
  minDate: e.instanceOf(Date),
  onChange: e.func.isRequired,
  onClear: e.func,
  placeholder: e.string,
  selectedDate: e.instanceOf(Date),
  selectedDateLabel: e.func.isRequired,
  size: e.oneOf(Object.keys(j.input))
};
export {
  v as DatePicker
};
