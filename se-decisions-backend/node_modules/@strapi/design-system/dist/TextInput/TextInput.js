import r, { useRef as g, useImperativeHandle as E } from "react";
import e from "prop-types";
import { Field as I } from "../Field/Field.js";
import { FieldLabel as T } from "../Field/FieldLabel.js";
import { FieldInput as y } from "../Field/FieldInput.js";
import { FieldHint as A } from "../Field/FieldHint.js";
import { FieldError as F } from "../Field/FieldError.js";
import "../Field/FieldContext.js";
import "../Field/FieldAction.js";
import { Flex as h } from "../Flex/Flex.js";
import { useId as x } from "../hooks/useId.js";
import { sizes as O } from "../themes/sizes.js";
const o = r.forwardRef(
  ({ size: a, startAction: m, endAction: d, name: p, hint: s, error: c, label: t, labelAction: f, id: u, required: b, ...i }, n) => {
    const v = x(u), l = g(null);
    if (!t && !i["aria-label"])
      throw new Error('The TextInput component needs a "label" or an "aria-label" props');
    return E(n, () => ({
      inputWrapperRef: l
    })), /* @__PURE__ */ r.createElement("div", { ref: l }, /* @__PURE__ */ r.createElement(I, { name: p, hint: s, error: c, id: v, required: b }, /* @__PURE__ */ r.createElement(h, { direction: "column", alignItems: "stretch", gap: 1 }, t && /* @__PURE__ */ r.createElement(T, { action: f }, t), /* @__PURE__ */ r.createElement(y, { size: a, ref: n, startAction: m, endAction: d, ...i }), /* @__PURE__ */ r.createElement(A, null), /* @__PURE__ */ r.createElement(F, null))));
  }
);
o.displayName = "TextInput";
o.defaultProps = {
  "aria-label": void 0,
  label: void 0,
  labelAction: void 0,
  error: void 0,
  hint: void 0,
  id: void 0,
  startAction: void 0,
  size: "M",
  endAction: void 0,
  required: !1
};
o.propTypes = {
  "aria-label": e.string,
  endAction: e.element,
  error: e.oneOfType([e.string, e.bool]),
  hint: e.oneOfType([e.string, e.bool, e.node, e.arrayOf(e.node)]),
  id: e.string,
  label: e.string,
  labelAction: e.element,
  name: e.string.isRequired,
  required: e.bool,
  size: e.oneOf(Object.keys(O.input)),
  startAction: e.element
};
export {
  o as TextInput
};
