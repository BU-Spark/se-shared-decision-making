import n from "react";
import { Clock as z } from "@strapi/icons";
import e from "prop-types";
import P from "styled-components";
import { useId as R } from "../hooks/useId.js";
import { Select as w } from "../Select/Select.js";
import { Option as x } from "../Select/Option.js";
import "../Select/OptGroup.js";
import "../Select/MultiSelectNested.js";
import "../Select/SelectList.js";
import { sizes as B } from "../themes/sizes.js";
const _ = P.div`
  display: flex;
  align-items: center;
  svg {
    height: 1rem;
    width: 1rem;
  }

  svg path {
    fill: ${({ theme: l }) => l.colors.neutral500};
  }
`, m = ({
  disabled: l,
  error: c,
  hint: d,
  id: f,
  onClear: b,
  onChange: h,
  value: a,
  clearLabel: g,
  label: y,
  required: v,
  selectButtonTitle: T,
  step: O,
  size: $,
  ...C
}) => {
  const M = R(f), k = 24, r = [];
  let o = 0;
  for (let t = 0; t < k; t++)
    for (o = 0; o < 60; )
      r.push(`${t < 10 ? `0${t}` : t}:${o < 10 ? `0${o}` : o}`), o += O;
  const q = () => {
    const t = a.split(":")[0], p = a.split(":")[1], E = r.reduce((i, u) => {
      const s = u.split(":")[0];
      return Math.abs(s - t) < Math.abs(i - t) ? s : i;
    }, r[0].split(":")[0]), I = r.reduce((i, u) => {
      const s = u.split(":")[1];
      return Math.abs(s - p) < Math.abs(i - p) ? s : i;
    }, r[0].split(":")[1]);
    return `${E}:${I}`;
  };
  return /* @__PURE__ */ n.createElement(
    w,
    {
      id: M,
      label: y,
      placeholder: "--:--",
      hint: d,
      onClear: b,
      clearLabel: g,
      error: c,
      value: a ? q() : null,
      size: $,
      onChange: h,
      disabled: l,
      required: v,
      selectButtonTitle: T,
      startIcon: /* @__PURE__ */ n.createElement(_, null, /* @__PURE__ */ n.createElement(z, null)),
      ...C
    },
    r.map((t) => /* @__PURE__ */ n.createElement(x, { value: t, key: t }, t))
  );
};
m.defaultProps = {
  disabled: !1,
  error: void 0,
  hint: void 0,
  id: void 0,
  label: void 0,
  onClear: void 0,
  required: !1,
  size: "M",
  selectButtonTitle: void 0,
  step: 15,
  value: void 0
};
m.propTypes = {
  clearLabel: e.string.isRequired,
  disabled: e.bool,
  error: e.oneOfType([e.string, e.bool]),
  hint: e.oneOfType([e.string, e.bool, e.node, e.arrayOf(e.node)]),
  id: e.oneOfType([e.string, e.number]),
  label: e.string,
  onChange: e.func.isRequired,
  onClear: e.func,
  required: e.bool,
  selectButtonTitle: e.string,
  size: e.oneOf(Object.keys(B.input)),
  step: e.number,
  value: e.oneOfType([
    e.arrayOf(e.oneOfType([e.string, e.number])),
    e.string,
    e.number
  ])
};
export {
  m as TimePicker
};
